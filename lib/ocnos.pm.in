package ocnos;
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  ocnos.pm - IP Infusion OcNOS rancid procedures

use 5.010;
use strict 'vars';
use warnings;
no warnings 'uninitialized';

require(Exporter);
our @ISA = qw(Exporter);

use rancid @VERSION@;

@ISA = qw(Exporter rancid main);
#XXX @Exporter::EXPORT = qw($VERSION @commandtable %commands @commands);

# load-time initialization
sub import {
    # Set the terminal, OcNOS does not recognize
    # the NETWORK terminal type
    $ENV{'TERM'} = "vt100";

    0;
}

# post-open(collection file) initialization
sub init {
    # Output header
    ProcessHistory("","","","#RANCID-CONTENT-TYPE: $devtype\n#\n");

    0;
}

# main loop of input of device output
sub inloop {
    my($INPUT, $OUTPUT) = @_;
    my($cmd, $rval);

    print STDERR ("Commands REGEX: $cmds_regexp \n") if($debug);

TOP: while(<$INPUT>) {
	tr/\015//d;

        print STDERR ("Processing line: $_") if($debug);

	if (/[>#]\s?exit$/) {
	    print STDERR ("$host: found exit\n") if ($debug);
	    $clean_run = 1;
	    last;
	}
	if (/^Error:/) {
	    print STDOUT ("$host clogin error: $_");
	    print STDERR ("$host clogin error: $_") if ($debug);
	    $clean_run = 0;
	    last;
	}
	while (/[#>]\s*($cmds_regexp)\s*$/) {
            print STDERR ("Matched command: $1\n") if ($debug);
	    $cmd = $1;
	    if (!defined($prompt)) {
		$prompt = ($_ =~ /^([^#>]+[#>])/)[0];
		$prompt =~ s/([][}{)(\\])/\\$1/g;
		print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	    }
	    print STDERR ("HIT COMMAND:$_") if ($debug);
            # These are the commands we don't need the output from
            if ($cmd =~ /^(terminal length 0|terminal width 132)/) {
                print STDERR ("Skipping command: $cmd\n") if ($debug);
                DiscardCommand($INPUT, $OUTPUT, $cmd);
                if (defined($commands{$cmd})) {
                    delete($commands{$cmd});
                }
                next;
            }
	    if (! defined($commands{$cmd})) {
                print STDERR "$host: found unexpected command - \"$cmd\"\n";
                $clean_run = 0;
                last TOP;
	    }
	    if (! defined(&{$commands{$cmd}})) {
                printf(STDERR "$host: undefined function - \"%s\"\n",
                       $commands{$cmd});
                $clean_run = 0;
                last TOP;
	    }
	    $rval = &{$commands{$cmd}}($INPUT, $OUTPUT, $cmd);
	    delete($commands{$cmd});
	    if ($rval == -1) {
		$clean_run = 0;
		print STDERR ("$host: $cmd failed: $rval\n") if ($debug);
		last TOP;
	    }
	    if (/[>#]\s?exit$/) {
		print STDERR ("$host: found exit\n") if ($debug);
		$clean_run = 1;
                $found_end = 1;
		last TOP;
	    }
	}
    }
}

sub DiscardCommand {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($slot);

    print STDERR "Entered DiscardCommand '$cmd'\n" if ($debug);

    while (<$INPUT>) {
        tr/\015//d;
        print STDERR ("Processing line DiscardCommand: $_") if($debug);
        last if (/^$prompt/);
    }
    print STDERR ("Leaving DiscardCommand: $_") if($debug);
    return(0);
}

sub OutputCommand {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($slot);

    print STDERR "Entered OutputCommand '$cmd'\n" if ($debug);
    ProcessHistory("","","","# >>> $cmd\n");

    while (<$INPUT>) {
        tr/\015//d;
        print STDERR ("Processing line OutputCommand: $_") if($debug);
        last if (/^$prompt/);
        ProcessHistory("","","","$_");
    }
    ProcessHistory("","","","#\n");
    return(0);
}

1;
