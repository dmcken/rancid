package ocnos;
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  ocnos.pm - IP Infusion OcNOS rancid procedures

use 5.010;
use strict 'vars';
use warnings;
no warnings 'uninitialized';
require(Exporter);
our @ISA = qw(Exporter);

use rancid @VERSION@;

our $proc;
our $found_env;
our $found_diag;
our $found_version;

our $type;              # device model, from ShowVersion

our $C0;                # output formatting control
our $E0;
our $H0;
our $I0;

@ISA = qw(Exporter rancid main);
#XXX @Exporter::EXPORT = qw($VERSION @commandtable %commands @commands);

# load-time initialization
sub import {

    $ENV{'TERM'} = "vt100";

    0;
}

# post-open(collection file) initialization
sub init {
    0;
}

# main loop of input of device output
sub inloop {
    my($INPUT, $OUTPUT) = @_;
    my($cmd, $rval);

TOP: while(<$INPUT>) {
        tr/\015//d;
CMD:    if (/[>#]\s?exit$/) {
            $clean_run = 1;
            last;
        }
        if (/^Error:/) {
            print STDOUT ("$host clogin error: $_");
            print STDERR ("$host clogin error: $_") if ($debug);
            $clean_run = 0;
            last;
        }
        while (/[>#]\s*($cmds_regexp)\s*$/) {
            $cmd = $1;
            if (!defined($prompt)) {
                $prompt = ($_ =~ /^([^#]+#)/)[0];
                $prompt =~ s/([][}{)(+\\])/\\$1/g;
                print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
            }
            print STDERR ("HIT COMMAND:$_") if ($debug);
            if (! defined($commands{$cmd})) {
                print STDERR "$host: found unexpected command - \"$cmd\"\n";
                $clean_run = 0;
                last TOP;
            }
            if (! defined(&{$commands{$cmd}})) {
                printf(STDERR "$host: undefined function - \"%s\"\n",
                       $commands{$cmd});
                $clean_run = 0;
                last TOP;
            }
            $rval = &{$commands{$cmd}}($INPUT, $OUTPUT, $cmd);
            delete($commands{$cmd});
            if ($rval == -1) {
                $clean_run = 0;
                last TOP;
            }
            if (defined($prompt)) {
                if (/$prompt/) {
                    goto CMD;
                }
            }
        }
    }
}

# This routine parses "show version"
sub ShowVersion {
    my($INPUT, $OUTPUT) = @_;
    my($slot);

    print STDERR "    In ShowVersion: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	next if (/^\s+\^$/);
        return(1) if (/invalid (input|command) detected/i);
        return(-1) if (/^plat exception:/i);	# failure to connect?
	next if /^\s*$/;

	next if (/^(uptime|copyright):/i);

	ProcessHistory("VERSION","","","#$_");
    }
    ProcessHistory("VERSION","","","#\n");
    return(0);
}

